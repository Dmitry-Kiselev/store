---
- hosts: all
  become: true


  vars_files:
    - vars.yml


  tasks:
    - name: Update apt
      apt: update_cache=yes
      tags: packages

    - name: Install base packages
      apt: name={{ item }} state=installed
      with_items:
        - build-essential
        - acl
        - ntp
        - htop
        - git
        - libpq-dev
        - python-dev
        - python-pip
        - python-pycurl
        - supervisor
        - gunicorn

      tags: packages

    - name: Install packages based on bower.json.
      bower:
        path: "{{ bower_json }}"

    - name: Install Python 3 and related packages
      apt: name={{ item }} state=latest
      with_items:
        - python3
        - python3-pip

      tags: packages

    - name: Install PostgreSQL
      apt: name={{item}}
      with_items:
        - postgresql
        - libpq-dev
        - python-psycopg2
      tags: packages

    - name: ensure database is created
      become_user: postgres
      postgresql_db: name={{dbname}}

    - name: ensure user has access to database
      become_user: postgres
      postgresql_user: db={{dbname}} name={{dbuser}} password={{dbpassword}} priv=ALL

    - name: ensure user does not have unnecessary privilege
      become_user: postgres
      postgresql_user: name={{dbuser}} role_attr_flags=NOSUPERUSER,NOCREATEDB

    - name: ensure no other user can access the database
      become_user: postgres
      postgresql_privs: db={{dbname}} role=PUBLIC type=database priv=ALL state=absent

    - name: Clone/pull project repo
      git: repo={{ project_repo }} dest={{ install_root }}/{{ application_name }} accept_hostkey=yes  key_file={{ ssh_private_key }}
      notify:
      - restart gunicorn

    - name: create server log dir
      file: path={{ install_root }}{{ application_name }}/logs state=directory

    - name: create server log file
      file: path={{ install_root }}{{ application_name }}/logs/server.log state=touch

    - name: Create gunicorn start script
      template: src=templates/gunicorn/gunicorn_start.j2
              dest={{ install_root }}{{ application_name }}/deploy/gunicorn_start
              backup=yes mode=0755

    - name: Create socket dir
      file: path={{ install_root }}/run state=directory mode=0755

    - name: Create nginx log directory
      file: path={{ install_root }}/logs state=directory

    - name: Create nginx log files
      file: path={{ install_root }}/logs/{{ item }} state=touch
      with_items:
        - nginx-access.log
        - nginx-error.log

    - name: Install Virtual env
      apt: name=python-virtualenv state=latest

    - name: Install packages required by the Django app inside virtualenv
      pip: virtualenv={{ virtualenv_path }} requirements={{ requirements_file }}
      notify:
      - restart gunicorn

    - name: Run Django database migrations
      django_manage:
          command: migrate
          app_path: "{{ project_path }}"
          virtualenv: "{{ virtualenv_path }}"

      when: run_django_db_migrations is defined and run_django_db_migrations
      tags: django.migrate

    - name: Run Django collectstatic
      django_manage:
          command: collectstatic
          app_path: "{{ project_path }}"
          virtualenv: "{{ virtualenv_path }}"
      tags: django.collectstatic


    - name: create supervisor log file
      file: path={{ install_root }}/logs/gunicorn_supervisor.log state=touch


    - name: Create the supervisor configuration file
      template: src=templates/supervisor/{{ application_name }}.conf.j2
              dest=/etc/supervisor/conf.d/{{ application_name }}.conf
              backup=yes
      notify:
        - reread supervisor
        - update supervisor

    - name: Run supervisor update command
      command: supervisorctl update

    - name: start project using supervisor
      command: supervisorctl start {{ application_name }}


    - name: Install Nginx
      apt: name=nginx state=installed
      tags: packages

    - name: Create the Nginx configuration file
      template: src=templates/nginx/{{ application_name }}.j2
              dest=/etc/nginx/sites-available/{{ application_name }}
              backup=yes
      notify:
        - restart nginx

    - name: Create symlink to nginx config
      command: ln -s /etc/nginx/sites-available/{{ application_name }} /etc/nginx/sites-enabled/{{ application_name }}
      notify: restart nginx

    - name: install redis
      apt: name=redis-server state=latest



  handlers:

  - name: start project using supervisor
    command: supervisorctl start {{ application_name }}

  - name: restart nginx
    service: name=nginx state=restarted enabled=yes

  - name: restart gunicorn
    service: name=gunicorn state=restarted

  - name: reread supervisor
    service: name=supervisorctl state=present

  - name: update supervisor
    service: name=supervisorctl state=restarted
